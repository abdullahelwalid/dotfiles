#!/usr/bin/env bash

# Symlinks and copies files from the ~/.dotfiles directory into their
# correct locations: $HOME, $HOME/.config/fish, $HOME/.config/templates,
# etc.

# Echoes, then runs the command.
#
# Combines/is inspired by:
#
#   http://stackoverflow.com/q/12231792/11543
#   https://dl.google.com/dl/cloudsdk/release/install_google_cloud_sdk.bash
#   http://tim.theenchanter.com/2009/02/how-to-escape-arguments-in-bash.html?showComment=1321001720427#c4751431215627296974

function x {
  echo "$" "$@"
  eval $(printf '%q ' "$@") < /dev/tty
}

function xmkdir {
  if [ ! -d "$1" ]; then
    x mkdir -p "$1"
  fi
}

# SRCDIR is the root of the git repo
# From http://stackoverflow.com/a/246128/11543
SRCDIR="$( cd -P "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# DSTDIR is probably $HOME
if [ -d "$1" ]; then
  DSTDIR="$1"
else
  DSTDIR="$( cd -P "$( dirname "${SRCDIR}" )" && pwd )"
fi

if [ -d "$HOME/local" ] ; then
  LOCAL="$HOME/local"
else
  LOCAL="/usr/local"
fi
xmkdir "$LOCAL"

# "dotfiles" that will end up in $HOME

for f in gls ls ; do

  if [ -x "$(which $f)" ]; then
     LS=$f
     break
  fi

done

for f in $SRCDIR/home/.* ; do

  if [ -d "$f" ]; then
    continue
  fi

  if [ $(basename "$f") = ".DS_Store" ]; then
    continue
  fi

  if [ ! -L "$DSTDIR/$(basename $f)" ]; then
    x ln -sf "$f" "$DSTDIR"
  fi

done

# Remove dangling symlinks

for f in $DSTDIR/.* ; do

  if readlink "$f" > /dev/null ; then
    if [ ! -f $(readlink "$f") ]; then
      x rm "$f"
    fi
  fi

done

# Set PLATFORM after $HOME/.platform has been symlinked

PLATFORM=$($HOME/.platform)

BINDIR="$LOCAL/bin"
xmkdir "$BINDIR"

# Subversion

if [ ! -L "$DSTDIR/.subversion/config" ]; then
  x rm -f "$DSTDIR/.subversion/config"
  x mkdir -p "$DSTDIR/.subversion"
  x ln -sf "$SRCDIR/etc/subversion/config" "$DSTDIR/.subversion/config"
fi

# CPAN configuration

if [ ! -L "$DSTDIR/.cpan/CPAN/MyConfig.pm" ]; then
  x rm -f "$DSTDIR/.cpan/CPAN/MyConfig.pm"
  x mkdir -p "$DSTDIR/.cpan/CPAN"
  x ln -sf "$SRCDIR/etc/CPAN/MyConfig.pm" "$DSTDIR/.cpan/CPAN/MyConfig.pm"
fi

# Sublime Text

# http://www.sublimetext.com/docs/3/projects.html - project specific configuration

if [ ! `which subl` ]; then
  if [ -d "/Applications/Sublime Text.app" ]; then
    x ln -sf "/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl" "$BINDIR/subl"
  fi
fi

if [ `which subl` ]; then

  if [ "$PLATFORM" = "linux" ]; then
    DST="$DSTDIR/.config/sublime-text-3/Packages/User"
  else
    DST="$DSTDIR/Library/Application Support/Sublime Text 3/Packages/User"
  fi

  xmkdir "$DST"

  if [ ! -L "$DST/Preferences.sublime-settings" ]; then
    x rm -f "$DST/Preferences.sublime-settings"
    x ln -sf "$SRCDIR/etc/subl/Preferences.sublime-settings" "$DST/Preferences.sublime-settings"
  fi

  # https://sublime.wbond.net/docs/syncing
  if [ ! -L "$DST/Package Control.sublime-settings" ]; then
    x rm -f "$DST/Package Control.sublime-settings"
    x ln -sf "$SRCDIR/etc/subl/Package Control.sublime-settings" "$DST/Package Control.sublime-settings"
  fi

  for d in Linux OSX Windows ; do
    if [ ! -L "$DST/Default ($d).sublime-keymap" ]; then
      x rm -f "$DST/Default ($d).sublime-keymap"
      x ln -sf "$SRCDIR/etc/subl/Default.sublime-keymap" "$DST/Default ($d).sublime-keymap"
    fi
  done

fi

# Atom

# Install atom, apm via the "Atom > Install Shell Commands" menu option

if [ `which atom` ]; then

  DST="$DSTDIR/.atom"

  xmkdir "$DST"

  for f in $SRCDIR/etc/atom/* ; do

    if [ ! -L "$DST/$(basename $f)" ]; then
      x rm -rf "$DST/$(basename $f)"
      x ln -sf "$f" "$DST"
    fi

  done

fi

if [ `which apm` ]; then

  packages="atom-beautify docblockr highlight-selected language-fish-shell linter linter-eslint minimap"

  for p in $packages ; do
    if ! apm list -ib | grep -q $p ; then
      x apm install $p
    fi
  done

  x apm upgrade --no-confirm

  # @TODO Remove packages *not* listed

fi

# OS X system key bindings and other settings

case "$PLATFORM" in

  darwin )
    # For some reason *some* applications (like TextEdit) won't read
    # DefaultKeyBinding.dict if it's symlinked, or is in a symlinked directory,
    # so rsync instead of symlink... http://apple.stackexchange.com/a/53110/890
    # rdar://12429092
    x rsync -a --delete "$SRCDIR/etc/KeyBindings" "$DSTDIR/Library"

    # System: try to default to "Paste and Match Style" on cmd-v http://apple.stackexchange.com/a/167649/890
    x defaults write -g NSUserKeyEquivalents -dict-add "Paste and Match Style" -string "@v"
    # System: enable right click
    x defaults write com.apple.driver.AppleBluetoothMultitouch.mouse MouseButtonMode -string TwoButton

    # Terminal: disable "marks" http://apple.stackexchange.com/a/209907/890
    x defaults write com.apple.Terminal AutoMarkPromptLines -int 0

    # Safari: show the full URL in the address bar (note: this still hides the scheme)
    x defaults write com.apple.Safari ShowFullURLInSmartSearchField -bool true
    # Safari: enable debug menu
    x defaults write com.apple.Safari IncludeInternalDebugMenu -bool true

    # Photos: don't open automatically when external media is connected
    x defaults -currentHost write com.apple.ImageCapture disableHotPlug -bool true

    # iA Writer: bind cmd-n to new file, instead of new file in library
    x defaults write pro.writer.mac NSUserKeyEquivalents -dict-add "New" -string "@n"
    ;;

esac

# Fonts

case "$PLATFORM" in

  darwin )
    # $DSTDIR/Library/Fonts is special, and can't be removed, so rsync
    # instead of symlink
    x rsync -a --delete "$SRCDIR/etc/Fonts/" "$DSTDIR/Library/Fonts/"
    ;;

  linux )
    # See /etc/fonts/fonts.conf for where Ubuntu looks for fonts
    # (/usr/local/share/fonts will also work)
    xmkdir $HOME/.fonts
    x rsync -a --delete "$SRCDIR/etc/Fonts/" $HOME/.fonts
    ;;

esac

# Color Palettes

case "$PLATFORM" in

  darwin )
    if [ ! -f "$DSTDIR/Library/Colors/Solarized.clr" ]; then
      x cp "$SRCDIR/etc/Solarized.clr" "$DSTDIR/Library/Colors"
    fi
    ;;

esac

# Services

case "$PLATFORM" in

  darwin )
    # Let's just assume Services is special...
    x rsync -a --delete "$SRCDIR/etc/Services/" "$DSTDIR/Library/Services/"
    ;;

esac

# fish

# Fish configuration needs to be in ~/.config/fish

if [ ! -L "$HOME/.config/fish" ]; then
  if [ -d "$HOME/.config/fish" ]; then
    x rm -rf "$HOME/.config/fish"
  fi
  x mkdir -p "$HOME/.config"
  x ln -s "$SRCDIR/fish" "$HOME/.config/fish"
fi

# Update completions
if [ -x "$(which fish)" ]; then
  x fish -c fish_update_completions
fi

# Scripts for $LOCAL/bin

# if [ -x "$(which php)" ]; then
#
#   # x() can't handle the pipe properly
#   echo "# installing composer via pipe"
#   ( set -x ; curl -sS https://getcomposer.org/installer | php -d detect_unicode=off -- --no-ansi --quiet --install-dir="$BINDIR" )
#   x chmod +x "$BINDIR/composer.phar"
#
#   if [ -e $BINDIR/composer.phar ]; then
#     x mv "$BINDIR/composer.phar" "$BINDIR/composer"
#   fi
#
#   x curl -sS http://get.sensiolabs.org/php-cs-fixer.phar -o "$BINDIR/php-cs-fixer"
#   x chmod +x "$BINDIR/php-cs-fixer"
#
# fi

# airport

if [ -x /System/Library/PrivateFrameworks/Apple80211.framework/Versions/A/Resources/airport ]; then

  x ln -sf /System/Library/PrivateFrameworks/Apple80211.framework/Versions/A/Resources/airport $BINDIR

fi

# capport

if [ -x /Library/*/Utilities/Capport.app ]; then

  x ln -sf /Library/*/Utilities/Capport.app $HOME/Applications

fi

# brew

if [ `which brew` ]; then

  x brew update || exit # need to agree to license when xcode updates
  x brew upgrade --all
  x brew cleanup

  packages="coreutils dict pv node tig wget direnv keybase htop"

  for p in $packages ; do
    if ! brew list | grep -q $p ; then
      x brew install $p
    fi
  done

fi

# apt-get

if [ `which apt-get` ]; then

  x sudo apt-get update
  x sudo apt-get upgrade

  packages="apt-file apt-show-versions command-not-found dnsutils apache2-utils htop iftop iotop lsof mosh traceroute mtr-tiny whois sysstat dstat hdparm psmisc locate wget pv zip unzip libxml2-utils jed sqlite3"

  for p in $packages ; do
    if ! dpkg --get-selections | grep -q $p ; then
      x sudo apt-get -y install $p
    fi
  done

fi

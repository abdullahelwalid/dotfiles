#!/usr/bin/env osascript

-- Assuming "edited" photos have a "_DxOFP.JPG" extension, finds the corresponding
-- "original", and adds it to the "Original" folder. Once there, you can remove
-- the original from the library completely via cmd-delete.

-- "constructor" for Album object
using terms from application "Photos"
	on AlbumNew(c)
		set l to {}
		repeat with f in every media item of c
			set end of l to {item:f, keywords:keywords of f, filename:filename of f, date:date of f, id:id of f}
		end repeat
		return l
	end AlbumNew
end using terms from

-- returns list of filenames in album
using terms from application "Photos"
	on AlbumPickFilename(d)
		set l to {}
		repeat with p in d
			set end of l to (filename of p)
		end repeat
		return l
	end AlbumPickFilename
end using terms from

-- returns item matching the filename s
using terms from application "Photos"
	on AlbumFind(d, s)
		repeat with p in d
			if (filename of p) is s then
				return p
			end if
		end repeat
	end AlbumFind
end using terms from

using terms from application "Photos"
end using terms from

tell application "Photos"

	set src to "Recent"
	set dst to "Original"

	try
		count of every media item of container src
		count of every media item of container dst
	on error
		log "error: Photos.app not ready, or album " & src & " or " & dst & " does not exist"
		return
	end try

	log "Processing album " & src
	set metadata to my AlbumNew(container src) -- not sure why we need to do "container" in the caller but whatevs...
	log "... done!"

	set i to my AlbumPickFilename(metadata)
	set m to {}

	repeat with f in i
		set o to (text 1 thru -11 of f) & (".JPG")
		if o is in i then
			set p to my AlbumFind(metadata, o)
			set end of m to (item of p)
		end if
	end repeat

	log "Adding " & (count of m) & " photos to album " & dst & " ..."
	add m to container dst
	log "... done!"

end tell

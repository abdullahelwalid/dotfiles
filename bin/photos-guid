#!/usr/bin/env bash

# Calculates a GUID from the image data (not metadata) of the JPG, embeds it
# into the JPG, and copies it into all other files that share the same name
# (e.g. RAW) files.

# This should make it possible/easy to find the RAW file associated with a JPG,
# since they will have the same GUID, and the GUID is not changed even if the
# image is edited. At least that's the idea.

# Process to find a RAW, given the JPG (photo.jpg):
#
# $ mdfind (mdls -r -name kMDItemFinderComment DSCF5339.JPG)
# /Users/mjs/Desktop/105_FUJI/DSCF5339.JPG
# /Users/mjs/Desktop/105_FUJI/DSCF5339.RAF
#
# Recover just the GUID:
#
# $ mdls -name kMDItemFinderComment DSCF5339.JPG
# kMDItemFinderComment = "a42a638a1d24c573b04cb565d4cc3e64439824cec2ad0378fe34389c993400f6"
#
# Or, if Finder metadata lost:
#
# $ exiftool -ImageUniqueID DSCF5339.JPG
# Image Unique ID                 : a42a638a1d24c573b04cb565d4cc3e64439824cec2ad0378fe34389c993400f6

# Useful commands, for debugging and otherwise
#
# On disk GUID
# xattr -p com.apple.metadata:kMDItemFinderComment *.ORF | xxd -r -p | plutil -convert xml1 - -o -
#
# Spotlight GUID (may be different)
# mdls -raw -name kMDItemFinderComment *.ORF
#
# EXIF GUID
# exiftool -ImageUniqueID *.ORF
#
# Force Spotlight reindexing
# mdimport *.ORF
#
# Spotlight metadata (all)
# mdls *.ORF
#
# EXIF metadata (all)
# exiftool -a *.ORF | grep "Image Unique ID"

shopt -s globstar nullglob

function isJpeg() {
  if [[ -z $1 ]]; then
    return 1
  else
    identify "$1" 2> /dev/null | cut -d ' ' -f 2 | grep -q JPEG
  fi
}

function base() {
  echo "${1%.*}"
}

if [[ -z $1 ]]; then
  echo "usage: $(basename "$0") dir"
  exit 1
fi

for f in "$1"/* ; do

  if [[ ! -f "$f" ]]; then
    break
  fi

  if isJpeg "$f" ; then

    # Calculate GUID based on image data only (not metadata)
    GUID=$(identify -format '%#' "$f")
    BASE=$(base "$f")

    # Ideally we'd write the GUID to the EXIF, and macOS would index that field.
    # However, I can't find a suitable field. (kMDItemIdentifier looks pretty
    # promising, but it doesn't seem to correspond to any EXIF field.) So,
    # instead we write the GUID to both the ImageUniqueID EXIF field (in the
    # file) *and* macOS's MDItemFinderComment field (in the file's metadata, on
    # macOS only). This does expose the GUID to the Finder, but it is indexed by
    # Spotlight.
    #
    # https://www.sno.phy.queensu.ca/~phil/exiftool/TagNames/MacOS.html
    # https://developer.apple.com/library/archive/documentation/CoreServices/Reference/MetadataAttributesRef/Reference/CommonAttrs.html

    # These need to be separate commands for some reason
    exiftool -q -overwrite_original_in_place -MDItemFinderComment="$GUID" "${BASE}".*
    exiftool -q -overwrite_original_in_place -ImageUniqueID="$GUID" "${BASE}".*

    # At this point, it's possible for the actual kMDItemFinderComment as
    # received from Spotlight to be correct, but when it's queried again from
    # the command-line, it's unchanged! I don't know why this happens. (Finder
    # will show the expected value.) The fix seems to be to just run mdimport on
    # the affected files, but it's difficult to do this from the script itself.

    echo "$GUID $f"

  fi

done

# Try to ensure the changes actually take...
sleep 5
mdimport "$1"
